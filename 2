namespace LojaVirtual.Repositories
{
    using LojaVirtual.Models;
    using System.Collections.Generic;

    public interface IProdutoRepository
    {
        void Adicionar(Produto produto);
        Produto ObterPorId(int id);
        List<Produto> Listar();
    }

    public class ProdutoRepository : IProdutoRepository
    {
        private readonly List<Produto> produtos = new();

        public void Adicionar(Produto produto) => produtos.Add(produto);

        public Produto ObterPorId(int id) => produtos.FirstOrDefault(p => p.Id == id);

        public List<Produto> Listar() => produtos;
    }

    public interface IClienteRepository
    {
        void Adicionar(Cliente cliente);
        Cliente ObterPorId(int id);
        List<Cliente> Listar();
    }

    public class ClienteRepository : IClienteRepository
    {
        private readonly List<Cliente> clientes = new();

        public void Adicionar(Cliente cliente) => clientes.Add(cliente);

        public Cliente ObterPorId(int id) => clientes.FirstOrDefault(c => c.Id == id);

        public List<Cliente> Listar() => clientes;
    }

    public interface IPedidoRepository
    {
        void Adicionar(Pedido pedido);
        List<Pedido> Listar();
    }

    public class PedidoRepository : IPedidoRepository
    {
        private readonly List<Pedido> pedidos = new();

        public void Adicionar(Pedido pedido) => pedidos.Add(pedido);

        public List<Pedido> Listar() => pedidos;
    }
}

namespace LojaVirtual.Logging
{
    public interface ILogger
    {
        void Log(string mensagem);
    }

    public class ConsoleLogger : ILogger
    {
        public void Log(string mensagem) => Console.WriteLine($"[LOG] {mensagem}");
    }
}

namespace LojaVirtual.Factory
{
    using LojaVirtual.Models;
    using System.Collections.Generic;

    public static class PedidoFactory
    {
        public static Pedido CriarPedido(int id, Cliente cliente, List<ItemPedido> itens)
        {
            return new Pedido(id, cliente, itens);
        }
    }
}

namespace LojaVirtual.Services
{
    using LojaVirtual.Descontos;
    using LojaVirtual.Models;
    using LojaVirtual.Repositories;
    using LojaVirtual.Logging;
    using LojaVirtual.Factory;
    using System.Collections.Generic;

    public class PedidoService
    {
        private readonly IPedidoRepository _pedidoRepo;
        private readonly ILogger _logger;
        private readonly List<IDescontoStrategy> _descontos;

        public PedidoService(IPedidoRepository pedidoRepo, ILogger logger, List<IDescontoStrategy> descontos)
        {
            _pedidoRepo = pedidoRepo;
            _logger = logger;
            _descontos = descontos;
        }

     
        private void AplicarDescontos(List<ItemPedido> itens)
        {
            foreach (var item in itens)
            {
                decimal maiorDesconto = 0m;
                foreach (var estrategia in _descontos)
                {
                    var desconto = estrategia.Calcular(item);
                    if (desconto > maiorDesconto)
                        maiorDesconto = desconto;
                }

                if (maiorDesconto > 0)
                {
                    decimal descontoPorUnidade = maiorDesconto / item.Quantidade;
                    item.Produto.AplicarDesconto(descontoPorUnidade);
                }
            }
        }
